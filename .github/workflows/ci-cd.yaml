name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.run_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Run ESLint
        run: npx eslint . --ext .js --format json --output-file eslint-results.json || true

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: eslint-results.json

      - name: List coverage directory for debug
        run: |
          echo "Listing coverage directory contents:"
          ls -l coverage || echo "No coverage directory found"
          cat coverage/lcov.info || echo "No lcov.info found"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      - name: Build Docker image
        run: docker build -t ghcr.io/nikitaks97/inventoryapp:${IMAGE_TAG} .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Push Docker image to GHCR
        run: docker push ghcr.io/nikitaks97/inventoryapp:${IMAGE_TAG}

      - name: Security scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/nikitaks97/inventoryapp:${{ github.run_number }}'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      - name: Security scan Docker image (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/nikitaks97/inventoryapp:${{ github.run_number }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set npm version from GitHub run number
        run: |
          NEW_VERSION="1.0.${GITHUB_RUN_NUMBER}"
          npm version --no-git-tag-version $NEW_VERSION

      - name: Publish npm package to GitHub Packages
        run: npm publish --registry=https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GHCR_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: inventory-app-artifacts
          path: |
            dist/
            build/
            package.json
            package-lock.json
            Dockerfile
            server.js
            public/
            views/
            src/
            models/
            routes/
            db/
            data/
            coverage/
  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.run_number }}
    environment:
      name: production
      url: http://inventory.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create imagePullSecret for GHCR
        run: |
          kubectl delete secret ghcr-secret --ignore-not-found
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com

      - name: Substitute image tag in deployment manifest
        run: |
          envsubst < k8s/deployment.yaml > k8s/deployment.subst.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/deployment.subst.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/inventory-app --timeout=300s

      - name: Verify deployment health
        run: |
          kubectl get pods -l app=inventory-app
          kubectl describe deployment inventory-app

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ Inventory App successfully deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ Inventory App deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}